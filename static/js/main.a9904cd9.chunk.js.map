{"version":3,"sources":["Slideshow/Slideshow.js","App.js","serviceWorker.js","index.js"],"names":["Slideshow","props","slideShowGenerator","photos","turnOffSlideshow","useState","currentPhotoIndex","setDisplayingPhotoIndex","slide","setSlideMetaData","ioStartInterval","startInterval","runSlideshow","photo","acc","useEffect","length","setInterval","clearInterval","className","src","img_src","style","width","earth_date","sol","camera","full_name","baseUrl","API_KEY","App","solToDisplay","setSolToDisplay","setPhotos","io","turnOnSlideshow","fetch","then","response","json","maxSol","rovers","max_sol","catch","err","message","nonMastPhotos","filter","name","previousSol","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAoFeA,MAjFf,SAAmBC,GAAQ,IAOrBC,EANIC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,iBADQ,EAG2BC,mBAAS,GAHpC,mBAGnBC,EAHmB,KAGAC,EAHA,OAIQF,qBAJR,mBAInBG,EAJmB,KAIZC,EAJY,OAKeJ,oBAAS,GALxB,mBAKnBK,EALmB,KAKFC,EALE,KASxB,SAASC,EAAaC,EAAOC,GAE3BL,EAAiBI,GA2BnB,OApBAE,qBAAU,WACRH,EAAaT,EAAO,IACpBI,EAAwBD,KACxBK,GAAc,KACb,IAEHI,qBAAU,WACJL,GAAmBP,EAAOa,OAAS,GAA2B,IAAtBV,IAI1CJ,EAAqBe,aAAY,WAC/BL,EAAaT,EAAOG,IACpBC,EAAwBD,OAGvB,QAEJ,CAACH,EAAQO,IAERJ,IAAsBH,EAAOa,QAC/BT,EAAwB,GACxBW,cAAchB,GACPE,KAGLI,EAEA,yBAAKW,UAAU,2BACb,yBAAKA,UAAU,uCACb,yBAAKC,IAAKZ,EAAMa,QAASC,MAAO,CAAEC,MAAO,WAE3C,yBAAKJ,UAAU,oCACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,SAAb,cACA,uBAAGA,UAAU,SAASX,EAAMgB,aAE9B,yBAAKL,UAAU,iBACb,uBAAGA,UAAU,SAAb,YACA,uBAAGA,UAAU,SAASX,EAAMiB,MAE9B,yBAAKN,UAAU,iBACb,uBAAGA,UAAU,SAAb,YACA,uBAAGA,UAAU,SAAb,SAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,SAAb,SACA,uBAAGA,UAAU,SAAb,cAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,SAAb,UACA,uBAAGA,UAAU,SAASX,EAAMkB,OAAOC,eAQxC,MC7EHC,EAAU,kDACVC,EAAU,2CAyDDC,MAvDf,WAAgB,IAAD,EACyBzB,qBADzB,mBACR0B,EADQ,KACMC,EADN,OAEa3B,mBAAS,IAFtB,mBAERF,EAFQ,KAEA8B,EAFA,OAGe5B,qBAHf,mBAGR6B,EAHQ,KAGJC,EAHI,KAyCb,OApCApB,qBAAU,WACRqB,MAAM,GAAD,OAAIR,EAAJ,oBAAuBC,IACzBQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IAAMC,EAASD,EAAKE,OAAO,GAAGC,QAE9B,OAAOV,EAAgBQ,MAExBG,OAAM,SAAAC,GAAG,OAAIA,EAAIC,aACnB,IAEH9B,qBAAU,WAEJgB,GACFK,MAAM,GAAD,OACAR,EADA,qCACoCC,EADpC,gBACmDE,IAErDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IAAMO,EAAgBP,EAAKpC,OAAO4C,QAAO,SAAAlC,GAAK,MAA0B,SAAtBA,EAAMa,OAAOsB,QAC/Df,EAAUa,GACVX,GAAgB,MAEjBQ,OAAM,SAAAC,GAAG,OAAIA,EAAIC,aAGrB,CAACd,IAEJhB,qBAAU,WACR,IAAW,IAAPmB,EAAc,CAChB,IAAMe,EAAcC,OAAOnB,GAAgB,EAC3CC,EAAgBiB,MAGjB,CAACf,IAGF,yBAAKf,UAAU,4BACb,yBAAKA,UAAU,+BACZe,GACC,kBAAC,EAAD,CACE/B,OAAQA,EACRC,iBAAkB,kBAAM+B,GAAgB,SC1ChCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.a9904cd9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Slideshow.css\";\n\nfunction Slideshow(props) {\n  const { photos, turnOffSlideshow } = props;\n  // console.log(\"photos\", photos);\n  let [currentPhotoIndex, setDisplayingPhotoIndex] = useState(0);\n  let [slide, setSlideMetaData] = useState();\n  let [ioStartInterval, startInterval] = useState(false);\n\n  let slideShowGenerator;\n\n  function runSlideshow(photo, acc) {\n    // console.log(\"currentPhotoIndex\", photo);\n    setSlideMetaData(photo);\n\n    // console.log(\"slideShowGenerator currentPhotoIndex\", acc);\n\n    // console.log(\"currentPhotoIndex\", currentPhotoIndex);\n  }\n\n  useEffect(() => {\n    runSlideshow(photos[0], 0);\n    setDisplayingPhotoIndex(currentPhotoIndex++);\n    startInterval(true);\n  }, []);\n\n  useEffect(() => {\n    if (ioStartInterval && photos.length > 0 && currentPhotoIndex === 0) {\n      // console.log(\n      //        \"if (ioStartInterval && photos.length > 0 && currentPhotoIndex === 0)\"\n      //      );\n      slideShowGenerator = setInterval(() => {\n        runSlideshow(photos[currentPhotoIndex], currentPhotoIndex);\n        setDisplayingPhotoIndex(currentPhotoIndex++);\n        // console.log(\"photos.length\", photos.length);\n        // console.log(\"////////////////////////////////////////////\");\n      }, 3000);\n    }\n  }, [photos, ioStartInterval]);\n\n  if (currentPhotoIndex === photos.length) {\n    setDisplayingPhotoIndex(0);\n    clearInterval(slideShowGenerator);\n    return turnOffSlideshow();\n  }\n\n  if (slide) {\n    return (\n      <div className=\"row slideshow-container\">\n        <div className=\"col s7 image-wrapper valign-wrapper\">\n          <img src={slide.img_src} style={{ width: \"100%\" }} />\n        </div>\n        <div className=\"col s5 fieldCollection-container\">\n          <div className=\"fieldCollection-wrapper valign-wrapper\">\n            <div className=\"field-wrapper\">\n              <p className=\"field\">Earth Date</p>\n              <p className=\"value\">{slide.earth_date}</p>\n            </div>\n            <div className=\"field-wrapper\">\n              <p className=\"field\">Sol Date</p>\n              <p className=\"value\">{slide.sol}</p>\n            </div>\n            <div className=\"field-wrapper\">\n              <p className=\"field\">Location</p>\n              <p className=\"value\">Mars</p>\n            </div>\n            <div className=\"field-wrapper\">\n              <p className=\"field\">Rover</p>\n              <p className=\"value\">Curiosity</p>\n            </div>\n            <div className=\"field-wrapper\">\n              <p className=\"field\">Camera</p>\n              <p className=\"value\">{slide.camera.full_name}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport default Slideshow;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Slideshow from \"./Slideshow/Slideshow\";\n\nconst baseUrl = \"https://api.nasa.gov/mars-photos/api/v1/rovers/\";\nconst API_KEY = \"8m8bkcVYqxE5j0vQL2wk1bpiBGibgaqCrOvwZVyU\";\n\nfunction App() {\n  let [solToDisplay, setSolToDisplay] = useState();\n  let [photos, setPhotos] = useState([]);\n  let [io, turnOnSlideshow] = useState();\n\n  useEffect(() => {\n    fetch(`${baseUrl}?api_key=${API_KEY}`)\n      .then(response => response.json())\n      .then(json => {\n        const maxSol = json.rovers[0].max_sol;\n        //console.log(\"maxSol\", maxSol);\n        return setSolToDisplay(maxSol);\n      })\n      .catch(err => err.message);\n  }, []);\n\n  useEffect(() => {\n    //console.log(\"solToDisplay\", solToDisplay);\n    if (solToDisplay) {\n      fetch(\n        `${baseUrl}/curiosity/photos?api_key=${API_KEY}&sol=${solToDisplay}`\n      )\n        .then(response => response.json())\n        .then(json => {\n          const nonMastPhotos = json.photos.filter(photo => photo.camera.name !== \"MAST\");\n          setPhotos(nonMastPhotos);\n          turnOnSlideshow(true);\n        })\n        .catch(err => err.message);\n      //console.log(\"////////////////////////////////////////////\");\n    }\n  }, [solToDisplay]);\n\n  useEffect(() => {\n    if (io === false) {\n      const previousSol = Number(solToDisplay) - 1;\n      setSolToDisplay(previousSol);\n      //console.log(\"////////////////////////////////////////////\");\n    }\n  }, [io]);\n\n  return (\n    <div className=\"container valign-wrapper\">\n      <div className=\"row App-slideshow-container\">                        \n        {io && (\n          <Slideshow\n            photos={photos}\n            turnOffSlideshow={() => turnOnSlideshow(false)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}